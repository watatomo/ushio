---
import { Icon } from "astro-icon/components";
---

<button id="storyOptionsButton">
    <Icon name="settings" />
</button>

<dialog id="storyOptions" class="modal">
    <form method="dialog">
        <button class="close-button" autofocus>
            <Icon name="x" id="closeStoryOptions" />
        </button>
        <div class="header">Story Options</div>
        <div class="names">
            <input type="text" id="firstName" value="Kaede" />
            <input type="text" id="lastName" value="Hamasaki" />
        </div>
        <div class="genders">
            <div>
                <input type="radio" id="m" name="gender" value="male" checked />
                <label for="m">Male</label>
            </div>
            <div>
                <input type="radio" id="f" name="gender" value="female" />
                <label for="f">Female</label>
            </div>
        </div>
    </form>
</dialog>

<script is:inline>
    const openStoryOptions = document.getElementById("storyOptionsButton");
    const dialog = document.getElementById("storyOptions");

    const radioButtons = document.querySelectorAll('input[name="gender"]');
    const closeStoryOptions = document.getElementById("closeStoryOptions");
    const firstNameInput = document.getElementById("firstName");
    const lastNameInput = document.getElementById("lastName");
    const storedData = localStorage.getItem("storyData");
    const charaElements = document.querySelectorAll('[character="MC"]');

    openStoryOptions.addEventListener("click", () => {
        dialog.showModal();
    });

    closeStoryOptions.addEventListener("click", () => {
        dialog.close();
    });

    if (storedData) {
        const data = JSON.parse(storedData);
        setChara(data.gender);
    } else {
        const defaultData = {
            firstName: "Kaede",
            lastName: "Hamasaki",
            gender: "male",
        };

        localStorage.setItem("storyData", JSON.stringify(defaultData));

        setChara(defaultData.gender);
    }

    radioButtons.forEach((radioButton) => {
        radioButton.addEventListener("change", function () {
            updateFirstName(this.value);
            lastNameInput.value = "Hamasaki";
            setChara(this.value);
        });
    });

    function updateFirstName(gender) {
        if (gender === "male") {
            firstNameInput.value = "Kaede";
        } else {
            firstNameInput.value = "Momiji";
        }
    }

    function setChara(gender) {
        charaElements.forEach((element) => {
            if (gender === "male") {
                element.setAttribute("character", "Kaede");
            } else {
                element.setAttribute("character", "Momiji");
            }

            const nameDiv = element.querySelector(".name");
            if (nameDiv) {
                nameDiv.textContent = firstNameInput.value;
            }
        });
    }

    firstNameInput.addEventListener("change", function () {
        charaElements.forEach((element) => {
            const nameDiv = element.querySelector(".name");
            if (nameDiv) {
                nameDiv.textContent = firstNameInput.value;
            }
        });
    });

    closeStoryOptions.addEventListener("click", function () {
        const firstName = firstNameInput.value;
        const lastName = lastNameInput.value;
        const selectedRadio = document.querySelector(
            'input[name="gender"]:checked'
        );
        const gender = selectedRadio.value;

        const storyData = {
            firstName,
            lastName,
            gender,
        };

        localStorage.setItem("storyData", JSON.stringify(storyData));
        // document.getElementById("storyOptions").style.display = "none";
    });
</script>

<style lang="scss">
    button {
        border: none;
    }

    button#storyOptionsButton {
        z-index: 999;
        position: fixed;
        display: flex;
        bottom: 20px;
        right: 20px;
        border-radius: 50%;
        padding: 0.72rem;
        background-color: var(--background-tertiary);
        filter: drop-shadow(0 0 4px var(--drop-shadow-color));
        color: var(--text-primary);

        &:hover {
            color: var(--text-tertiary);
            cursor: pointer;
        }

        svg {
            font-size: 28px;
        }
    }

    .modal {
        border: none;
        position: relative;
        background-color: var(--background-primary);
        border-radius: 8px;
        max-width: 60rem;
        color: var(--text-primary);
        padding: 2.25em;

        .genders {
            display: flex;
            flex-direction: row;
            gap: 1em;
        }

        &::backdrop {
            z-index: 2;
            background-color: rgba(0, 0, 0, 0.55);
        }

        button {
            background: none;
        }
    }
</style>
